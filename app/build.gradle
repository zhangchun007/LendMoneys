apply plugin: 'com.android.application'
apply plugin: com.app.haiercash.plugin.TbPlugin
// app 其他 gradle 插件
// HMS SDK gradle 插件
apply plugin: 'com.huawei.agconnect'
apply plugin:'newlens'// 放在 apply plugin: 'com.android.application' 下面

apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

android {
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file(rootProject.getRootDir().getAbsolutePath() + "/key/debug.keystore")
            storePassword 'android'
        }
        release {
            keyAlias 'haiercash'
            keyPassword 'a123456'
            storeFile file(rootProject.getRootDir().getAbsolutePath() + "/key/Gouhua-release.keystore")
            storePassword 'a123456'
        }
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        //flavorDimensions rootProject.ext.android.versionName
        resConfigs "zh"
        multiDexEnabled true
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
//            abiFilters 'armeabi', 'arm64-v8a'
            abiFilters 'arm64-v8a'
        }
        //防止so被压缩
        packagingOptions {
            doNotStrip "**/*.so"
        }
        //signingConfig signingConfigs.release
        //room数据库
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
//            }
//        }

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [moduleName: project.getName()]
//                //arguments = [moduleName: project.getName(), AROUTER_GENERATE_DOC: "enable"]
//            }
//        }

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [AROUTER_MODULE_NAME: project.getName()]
//            }
//        }

        kapt{
            arguments{
                arg("AROUTER_MODULE_NAME",project.getName())
            }
        }

    }

    flavorDimensions 'environment'
    productFlavors {
        production { //生产环境
            buildConfigField "boolean", "IS_RELEASE", "true"//生产环境：true;测试环境：false；
            buildConfigField "String", "API_SERVER_URL", "\"https://shop.haiercash.com/\""//API Host
            buildConfigField "String", "SPECIAL_H5_URL", "\"https://standardpay.haiercash.com/\""//特殊H5域名
            buildConfigField "String", "CLOSE_ACCOUNT_URL", "\"https://app.haiercash.com/closeMyAccount/#/login\""//注销优化URL
            resValue "string", "app_name", "够花"
            //信鸽
            manifestPlaceholders = [
                    XG_ACCESS_ID : "",// 生产 注册应用的accessid
                    XG_ACCESS_KEY: "",//生产 注册应用的accesskey
                    HW_APPID     : "100150381",
                    PACKAGE_NAME : "com.haiercash.gouhua",
                    VIVO_APPID:"100180273",
                    VIVO_APPKEY:"3337f5aa71b26d08af3e3d9c715e94f7"
            ]
        }
        sealing58 { //封测环境 58外网封测环境
            buildConfigField "boolean", "IS_RELEASE", "false"//生产环境：true;测试环境：false；
            buildConfigField "String", "API_SERVER_URL", "\"https://shop-stg.haiercash.com/\""//API Host
            buildConfigField "String", "SPECIAL_H5_URL", "\"https://standardpay-stg.haiercash.com/\""//特殊H5域名
            buildConfigField "String", "CLOSE_ACCOUNT_URL", "\"https://testpm.haiercash.com:9002/closeMyAccount/#/login\""//注销优化URL
            resValue "string", "app_name", "够花封58"
            //信鸽
            manifestPlaceholders = [
                    XG_ACCESS_ID : "",//封测-注册应用的accessid
                    XG_ACCESS_KEY: "",//封测-注册应用的accesskey
                    HW_APPID     : "100150381",
                    PACKAGE_NAME : "com.haiercash.gouhua",
                    VIVO_APPID:"100180273",
                    VIVO_APPKEY:"3337f5aa71b26d08af3e3d9c715e94f7"
            ]
        }
        sealingB {//测试环境B
            buildConfigField "boolean", "IS_RELEASE", "false"//生产环境：true;测试环境：false；
            buildConfigField "String", "API_SERVER_URL", "\"https://shop-p2.haiercash.com/\""//API Host
            buildConfigField "String", "SPECIAL_H5_URL", "\"https://standardpay-p2.haiercash.com/\""//特殊H5域名
            buildConfigField "String", "CLOSE_ACCOUNT_URL", "\"https://testpm.haiercash.com:9000/closeMyAccount/#/login\""//注销优化URL
            resValue "string", "app_name", "够花测B"
            //信鸽
            manifestPlaceholders = [
                    XG_ACCESS_ID : "",//封测-注册应用的accessid
                    XG_ACCESS_KEY: "",//封测-注册应用的accesskey
                    HW_APPID     : "100150381",
                    PACKAGE_NAME : "com.haiercash.gouhua",
                    VIVO_APPID:"100180273",
                    VIVO_APPKEY:"3337f5aa71b26d08af3e3d9c715e94f7"
            ]
        }
        yufabu {
            buildConfigField "boolean", "IS_RELEASE", "false"//生产环境：true;测试环境：false；
            buildConfigField "String", "API_SERVER_URL", "\"https://shop-pre.haiercash.com/\""//API Host
            buildConfigField "String", "SPECIAL_H5_URL", "\"https://standardpay-pre.haiercash.com/\""//特殊H5域名
            buildConfigField "String", "CLOSE_ACCOUNT_URL", "\"https://testpm.haiercash.com:9002/closeMyAccount/#/login\""//注销优化URL
            resValue "string", "app_name", "够花等比"
            //信鸽
            manifestPlaceholders = [
                    XG_ACCESS_ID : "",//封测-注册应用的accessid
                    XG_ACCESS_KEY: "",//封测-注册应用的accesskey
                    HW_APPID     : "100150381",
                    PACKAGE_NAME : "com.haiercash.gouhua",
                    VIVO_APPID:"100180273",
                    VIVO_APPKEY:"3337f5aa71b26d08af3e3d9c715e94f7"
            ]
        }
    }

    buildTypes {
        release {
            //启用代码混淆
            minifyEnabled true
            //是否优化zip
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            signingConfig signingConfigs.release
            //混淆规则配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "xml", "network_security_config", "@xml/network_security_config_release"
        }
        debug {
            //启用代码混淆
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "xml", "network_security_config", "@xml/network_security_config_debug"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    buildFeatures {
        viewBinding = true
    }

    // Butterknife requires Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // 自定义输出路径  且只有在非debug模式的时候才重置输出包的文件夹
            if (!"debug".equalsIgnoreCase(variant.buildType.name)) {
                //variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + File.separator + "outputs")
                variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.absolutePath + File.separator + "outputs")
                //println "tag:" + variant.getPackageApplicationProvider().get().outputs.files[1].name
                //variant.getPackageApplicationProvider().get().outputs.files[1].path
                //println "tag1:" + variant.getPackageApplicationProvider().get().outputs.files[1].path
            }
            //print "运行模式：" + variant.buildType.name + "--" + variant.flavorName
            //println "  输出打包文件地址dir:" + variant.getPackageApplicationProvider().get().outputDirectory
            //在这里修改apk文件名  _${variant.flavorName}
            def variants = ""
            switch (productFlavors[0].name) {
                case "sealing58":
                    variants = "封测"
                    break
                case "sealingB":
                    variants = "测试B"
                    break
                case "production":
                    variants = "生产"
                    break
                default:
                    variants = "等比"
                    break
            }
            if (variant.flavorName.contains('sealing58')) {
                //outputFileName = "gouhua_" + variants + "_v${variant.versionName}_58_${releaseTime()}.apk"
                outputFileName = "gouhua_" + variants + "_v${variant.versionName}_58.apk"
            } else if (variant.flavorName.contains('sealingB')) {
                outputFileName = "gouhua_" + variants + "_v${variant.versionName}.apk"
            } else {
                //在这里修改apk文件名  _${variant.flavorName}
                outputFileName = "gouhua_" + variants + "_v${variant.versionName}.apk"
            }
            println "文件名称：" + outputFileName
            //def outputFile = output.outputFile
            //if (outputFile != null && outputFile.name.endsWith('.apk')) {
            //    if (variant.flavorName.contains('sealing')) {
            //        //在这里修改apk文件名
            //        outputFileName = "gouhua_封测_v${variant.versionName}_${variant.flavorName}.apk"
            //    } else {
            //        //在这里修改apk文件名
            //        outputFileName = "gouhua_生产_v${variant.versionName}_${variant.flavorName}.apk"
            //    }
            //println "输出apk地址:" + output.outputFile.absolutePath
            //}
        }
    }
}

def releaseTime() {
    //return new Date().format("yyyyMMddHH", TimeZone.getTimeZone("GMT+8:00"))//yyyyMMddHHmm
    return new Date().format("yyyyMMddHHmm")//yyyyMMddHHmm
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.dependencies["appcompat-androidx"]
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.umeng.umsdk:qt-common:1.3.2.P'
    implementation 'com.umeng.umsdk:qt-spm:1.3.2'
    implementation  'io.github.scwang90:refresh-layout-kernel:2.0.5'      //核心必须依赖
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    //androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso_core"]
    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["rxjava2:rxandroid"]
    implementation rootProject.ext.dependencies["retrofit2"]
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava2"]
    api rootProject.ext.dependencies["rxlifecycle-components"]
    api rootProject.ext.dependencies["rxrelay"]
    api rootProject.ext.dependencies["rxpermissions"]

    api rootProject.ext.dependencies["arouter"]
    //annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
    kapt  rootProject.ext.dependencies["arouter_compiler"]

    api rootProject.ext.dependencies["picker_view"]
    api rootProject.ext.dependencies["butterknife"]
    api rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]

    api 'com.alipay.sdk:alipaysdk-android:+@aar'


    //implementation rootProject.ext.dependencies["design"]
    implementation "com.google.android.material:material:1.5.0-alpha01"
    implementation rootProject.ext.dependencies["appcompat-androidx"]
    //implementation rootProject.ext.dependencies["constraint_layout"]
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    //implementation rootProject.ext.dependencies["recyclerview_v7"]
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:1.0.0"
    implementation "com.airbnb.android:lottie:3.6.1"
    implementation rootProject.ext.dependencies["bugly"]
    //bugly
    testImplementation rootProject.ext.dependencies["junit"]
    //implementation rootProject.ext.dependencies["butterknife"]
    kapt rootProject.ext.dependencies["butterknife_compiler"]

    implementation rootProject.ext.dependencies["glide"]
    kapt rootProject.ext.dependencies["glide_compiler"]
    implementation rootProject.ext.dependencies["workManager"]
    //talkingdata
    //信鸽推送
    implementation rootProject.ext.dependencies["xinge"]
    implementation rootProject.ext.dependencies["hwPush"]
    implementation rootProject.ext.dependencies["hwHmsPush"]
    implementation rootProject.ext.dependencies["miPush"]
    implementation rootProject.ext.dependencies["mzPush"]
    implementation rootProject.ext.dependencies["oppoPush"]
    implementation rootProject.ext.dependencies["vivoPush"]

    //微信支付、分享
    implementation rootProject.ext.dependencies["wechat"]

    implementation rootProject.ext.dependencies["jg"]
    //implementation files('libs/tbs_sdk.jar')
    //implementation rootProject.ext.dependencies["tbs"]
    implementation rootProject.ext.dependencies["jsbridge"]

    implementation files('libs/BrMobileSDK_v4.0.1.jar')
    //本地modul
    implementation project(':common')
    implementation project(':ijiami')//安全键盘
    implementation project(':qr_code')//zxing 二维码扫描
    implementation project(':livenesslib')
    implementation project(':idcardlib')

    implementation project(':gesturespassword')
    //implementation project(path: ':pulltorefreshlibrary')
    implementation(name: 'pulltorefreshlibrary', ext: 'aar')
    implementation(name: 'RootShell', ext: 'aar')
    //百度定位
    implementation(name: 'BaiduLBS_Android', ext: 'aar')

    //网易设备指纹
    implementation(name: 'NEDevice-SdkRelease_v1.8.5_202301311441', ext: 'aar')
    //网易滑块，行为式验证码
    implementation rootProject.ext.dependencies["yidun"]

    implementation rootProject.ext.dependencies["jiyan"]

    implementation "com.networkbench:tingyun-ea-agent-android:$tingyun_sdk_version"
    implementation "com.networkbench.newlens.agent.android2:nbs.newlens.nativecrash:$tingyun_ndk_version"// 采集native carsh 需集成此包
    implementation "com.networkbench:nbs.newlens.android.log:1.0.1" // 日志回捞需集成此包
    // 采集 OOM 数据需要 kotlin-gradle-plugin 插件 1.3+ ，并依赖 androidx.core:core-ktx、androidx.appcompat:appcompat、androidx.lifecycle:lifecycle-process、com.squareup.okio:okio 等库
    implementation "com.networkbench:tingyun-javaleak:1.0.0" // 采集 OOM 需集成此包
    implementation "org.bouncycastle:bcprov-jdk15to18:1.69"// 启用国密加密需集成此包
    implementation "org.bouncycastle:bcpkix-jdk15to18:1.69"// 启用国密加密需集成此包

    // 自 SDK 1.3.2.0 起，需一并加入以下依赖语句，否则可能导致 OPPO 推送注册失败
    //implementation 'com.google.code.gson:gson:2.6.2'  已有
    implementation 'commons-codec:commons-codec:1.15'
    implementation "com.github.YvesCheung.RollingText:RollingText:1.3.0"
    implementation project(':banner')
    implementation 'com.alibaba:fastjson:1.1.72.android'

}
